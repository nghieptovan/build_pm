{"version":3,"sources":["globals/fake-data.js","globals/api-fetch.js","globals/index.js","pages/editor.js","pages/preview.js","serviceWorker.js","index.js"],"names":["date","Date","toISOString","pageType","id","name","rest_base","slug","supports","author","comments","discussion","editor","excerpt","revisions","thumbnail","title","viewable","page","content","raw","rendered","date_gmt","status","count","last_id","parent","theme_style","type","link","window","location","origin","categories","featured_media","permalink_template","preview_link","_links","themes","theme_supports","formats","medias","n","Array","fill","map","i","index","caption","media_type","mime_type","source_url","media_details","file","height","image_meta","sizes","width","getMedias","apiFetch","options","res","item","path","JSON","parse","localStorage","getItem","data","replace","setItem","stringify","method","headers","get","value","Math","floor","random","length","Promise","resolve","wp","Editor","settings","alignWide","availableTemplates","allowedBlockTypes","disableCustomColors","disablePostFormats","titlePlaceholder","bodyPlaceholder","isRTL","autosaveInterval","postLock","isLocked","canPublish","canSave","canAutosave","mediaLibrary","removeItem","dispatch","disableTips","_wpLoadGutenbergEditor","domReady","editPost","initializeEditor","className","React","Component","Preview","props","state","editorStyle","document","querySelector","remove","style","this","setState","renderHTML","Boolean","hostname","match","ReactDOM","render","BrowserRouter","Switch","Route","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56ce6f15.chunk.js","sourcesContent":["const date = (new Date()).toISOString();\r\n\r\nexport const pageType = {\r\n  id: 1,\r\n  name: 'Pages', rest_base: 'pages', slug: 'page',\r\n  supports: {\r\n    author: false,\r\n    comments: false,\r\n    'custom-fields': false,\r\n    discussion: false,\r\n    editor: true,\r\n    excerpt: false,\r\n    'page-attributes': false,\r\n    revisions: false,\r\n    thumbnail: false,\r\n    title: false,\r\n  },\r\n  viewable: true,\r\n};\r\n\r\nexport const page = {\r\n  id: 1,\r\n  content: {\r\n    raw: '',\r\n    rendered: '',\r\n  },\r\n  date,\r\n  date_gmt: date,\r\n  title: {\r\n    raw: 'Preview page',\r\n    rendered: 'Preview page',\r\n  },\r\n  excerpt: {\r\n    raw: '',\r\n    rendered: '',\r\n  },\r\n  status: 'draft',\r\n  revisions: { count: 0, last_id: 0 },\r\n  parent: 0,\r\n  theme_style: true,\r\n  type: 'page',\r\n  link: `${window.location.origin}/preview`,\r\n  categories: [ ],\r\n  featured_media: 0,\r\n  permalink_template: `${window.location.origin}/preview`,\r\n  preview_link: `${window.location.origin}/preview`,\r\n  _links: {\r\n    'wp:action-assign-categories': [],\r\n    'wp:action-create-categories': [],\r\n  },\r\n};\r\n\r\nexport const getMedias = (n = 3) => {\r\n  return Array(n).fill().map((i, index) => {\r\n    const id = index + 1;\r\n\r\n    return {\r\n      id,\r\n      caption: { raw: '', rendered: '' },\r\n      date_gmt: date,\r\n      date,\r\n      link: `${window.location.origin}/img${id}.png`,\r\n      media_type: 'image',\r\n      mime_type: 'image/jpeg',\r\n      source_url: `${window.location.origin}/img${id}.png`,\r\n      media_details: {\r\n        file: '',\r\n        height: 2100,\r\n        image_meta: {},\r\n        sizes: {},\r\n        width: 3360,\r\n      },\r\n      title: { raw: '', rendered: '' },\r\n    };\r\n  });\r\n};\r\n\r\nexport const themes = [{\r\n  theme_supports: {\r\n    formats: ['standard', 'aside', 'image', 'video', 'quote', 'link', 'gallery', 'audio'],\r\n    'post-thumbanials': true,\r\n    'responsive-embeds': false,\r\n  },\r\n}];","import { page, pageType, getMedias, themes } from './fake-data.js';\r\n\r\nconst medias = getMedias();\r\n\r\nconst apiFetch = options => {\r\n  // console.log(options.path, options);\r\n\r\n  let res = {};\r\n  let item = {};\r\n\r\n  switch (options.path) {\r\n    case '/wp/v2/types?context=edit':\r\n      res = { page: pageType };\r\n      break;\r\n    case '/wp/v2/types/page?context=edit':\r\n      res = { ...pageType };\r\n      break;\r\n    case '/wp/v2/pages/1?context=edit':\r\n      res = JSON.parse(localStorage.getItem('g-editor-page')) || page;\r\n      break;\r\n    case '/wp/v2/pages/1/autosaves':\r\n      item = JSON.parse(localStorage.getItem('g-editor-page')) || page;\r\n      if (options.data) {\r\n        item = {\r\n          ...item,\r\n          // update content\r\n          content: {\r\n            raw: options.data.content,\r\n            rendered: options.data.content.replace(/(<!--.*?-->)/g, ''),\r\n          },\r\n        };\r\n\r\n        localStorage.setItem('g-editor-page', JSON.stringify(item));\r\n      }\r\n\r\n      res = item;\r\n      break;\r\n    case '/wp/v2/media?context=edit':\r\n      res = medias;\r\n      break;\r\n    case '/wp/v2/media':\r\n      if (options.method === 'OPTIONS') {\r\n        res = {\r\n          headers: {\r\n            get: value => {\r\n              if (value === 'allow') {\r\n                return [ 'POST' ];\r\n              }\r\n            },\r\n          },\r\n        };\r\n      }\r\n      else {\r\n        res = medias[Math.floor(Math.random() * medias.length) + 0];\r\n      }\r\n\r\n      break;\r\n    case '/wp/v2/themes?status=active':\r\n      res = themes;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // console.log(res);\r\n  return new Promise(resolve => { resolve(res); });\r\n};\r\n\r\nexport default apiFetch;","// Internal Dependencies\r\nimport apiFetch from './api-fetch';\r\n// import { addQueryArgs } from './url';\r\n\r\nwindow.wp = {\r\n  apiFetch,\r\n  // url: { addQueryArgs },\r\n};","import React from 'react';\r\nimport { data, editPost, domReady } from '@frontkom/gutenberg-js';\r\n\r\n// Gutenberg JS Style\r\nimport '@frontkom/gutenberg-js/build/css/block-library/style.css';\r\nimport '@frontkom/gutenberg-js/build/css/style.css';\r\n\r\nclass Editor extends React.Component {\r\n  componentDidMount () {\r\n    const settings = {\r\n      alignWide: true,\r\n      availableTemplates: [],\r\n      allowedBlockTypes: true,\r\n      disableCustomColors: false,\r\n      disablePostFormats: false,\r\n      titlePlaceholder: 'Add title',\r\n      bodyPlaceholder: 'Insert your custom block',\r\n      isRTL: false,\r\n      autosaveInterval: 0,\r\n      postLock: {\r\n        isLocked: false,\r\n      },\r\n      canPublish: false,\r\n      canSave: false,\r\n      canAutosave: false,\r\n      mediaLibrary: true,\r\n    };\r\n\r\n    // reset localStorage\r\n    localStorage.removeItem('g-editor-page');\r\n\r\n    // Disable tips\r\n    data.dispatch('core/nux').disableTips();\r\n\r\n    // Initialize the editor\r\n    window._wpLoadGutenbergEditor = new Promise(function (resolve) {\r\n      domReady(function () {\r\n        resolve(editPost.initializeEditor('editor', 'page', 1, settings, {}));\r\n      });\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return <div id=\"editor\" className=\"gutenberg__editor\"></div>;\r\n  }\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\nimport renderHTML from 'react-render-html';\r\n\r\nclass Preview extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rendered: '',\r\n    };\r\n  }\r\n\r\n  componentWillMount () {\r\n    // remove block editor style from page\r\n    const editorStyle = document.querySelector('style[id=\"block-editor-style\"]');\r\n\r\n    if (editorStyle) {\r\n      editorStyle.remove();\r\n    }\r\n\r\n    // remove editor style\r\n    const style = document.querySelector('link[href$=\"css/gutenberg/style.css\"]');\r\n\r\n    if (style) {\r\n      style.remove();\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    const page = JSON.parse(localStorage.getItem('g-editor-page'));\r\n\r\n    if (page) {\r\n      this.setState({\r\n        rendered: page.content ? page.content.rendered : '',\r\n      });\r\n    }\r\n  }\r\n  render () {\r\n    const { rendered } = this.state;\r\n    return rendered ? renderHTML(rendered) : <center><em>Add your custom block in the editor</em></center>;\r\n  }\r\n}\r\n\r\nexport default Preview;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      }\r\n      else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n  .register(swUrl)\r\n  .then(registration => {\r\n    registration.onupdatefound = () => {\r\n      const installingWorker = registration.installing;\r\n      installingWorker.onstatechange = () => {\r\n        if (installingWorker.state === 'installed') {\r\n          if (navigator.serviceWorker.controller) {\r\n            // At this point, the updated precached content has been fetched,\r\n            // but the previous service worker will still serve the older\r\n            // content until all client tabs are closed.\r\n            console.log(\r\n              'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n            );\r\n\r\n            // Execute callback\r\n            if (config && config.onUpdate) {\r\n              config.onUpdate(registration);\r\n            }\r\n          }\r\n          else {\r\n            // At this point, everything has been precached.\r\n            // It's the perfect time to display a\r\n            // \"Content is cached for offline use.\" message.\r\n            console.log('Content is cached for offline use.');\r\n\r\n            // Execute callback\r\n            if (config && config.onSuccess) {\r\n              config.onSuccess(registration);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    };\r\n  })\r\n  .catch(error => {\r\n    console.error('Error during service worker registration:', error);\r\n  });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n  .then(response => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    if (\r\n      response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n    ) {\r\n      // No service worker found. Probably a different app. Reload the page.\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister().then(() => {\r\n          window.location.reload();\r\n        });\r\n      });\r\n    }\r\n    else {\r\n      // Service worker found. Proceed as normal.\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  })\r\n  .catch(() => {\r\n    console.log(\r\n      'No internet connection found. App is running in offline mode.'\r\n    );\r\n  });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './globals';\nimport Editor from './pages/editor';\nimport Preview from './pages/preview';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/preview\" component={ Preview } />\n      <Route component={ Editor } />\n    </Switch>\n  </BrowserRouter>\n), document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}